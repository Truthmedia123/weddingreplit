name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  COVERAGE_THRESHOLD: 80

jobs:
  # Lint and Type Check
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npm run type-check

  # Unit Tests - Server
  test-server:
    name: Server Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run server tests
        run: npm run test:server -- --coverage --watchAll=false

      - name: Check server test coverage
        run: |
          COVERAGE=$(npm run test:server -- --coverage --watchAll=false --silent | grep -o 'All files.*[0-9]\+\.[0-9]\+' | grep -o '[0-9]\+\.[0-9]\+' | tail -1)
          echo "Server coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
            echo "❌ Server coverage $COVERAGE% is below threshold $COVERAGE_THRESHOLD%"
            exit 1
          fi
          echo "✅ Server coverage $COVERAGE% meets threshold $COVERAGE_THRESHOLD%"

      - name: Upload server coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/server/lcov.info
          flags: server
          name: server-coverage

  # Unit Tests - Client
  test-client:
    name: Client Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run client tests
        run: npm run test:client -- --coverage --watchAll=false

      - name: Check client test coverage
        run: |
          COVERAGE=$(npm run test:client -- --coverage --watchAll=false --silent | grep -o 'All files.*[0-9]\+\.[0-9]\+' | grep -o '[0-9]\+\.[0-9]\+' | tail -1)
          echo "Client coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
            echo "❌ Client coverage $COVERAGE% is below threshold $COVERAGE_THRESHOLD%"
            exit 1
          fi
          echo "✅ Client coverage $COVERAGE% meets threshold $COVERAGE_THRESHOLD%"

      - name: Upload client coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/client/lcov.info
          flags: client
          name: client-coverage

  # Unit Tests - Shared
  test-shared:
    name: Shared Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run shared tests
        run: npm run test:shared -- --coverage --watchAll=false

      - name: Upload shared coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/shared/lcov.info
          flags: shared
          name: shared-coverage

  # Integration Tests
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-server, test-client, test-shared]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start test database
        run: |
          # Create test database
          npm run db:setup:test

      - name: Run integration tests
        run: npm run test:integration

      - name: Cleanup test database
        run: npm run db:cleanup:test
        if: always()

  # Performance Tests
  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test-integration]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: npm run test:performance

      - name: Check performance benchmarks
        run: |
          echo "Checking performance benchmarks..."
          # Add performance threshold checks here
          npm run test:performance:check

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run dependency vulnerability check
        run: npx audit-ci --moderate

  # Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test-server, test-client, test-shared]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Verify build artifacts
        run: |
          echo "Verifying build artifacts..."
          ls -la dist/
          # Add build verification checks

  # Quality Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [test-server, test-client, test-shared, test-integration, security-audit, build]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "Checking quality gates..."
          
          # Check if any required job failed
          if [[ "${{ needs.test-server.result }}" != "success" ]]; then
            echo "❌ Server tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.test-client.result }}" != "success" ]]; then
            echo "❌ Client tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.test-shared.result }}" != "success" ]]; then
            echo "❌ Shared tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.test-integration.result }}" != "success" ]]; then
            echo "❌ Integration tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.security-audit.result }}" != "success" ]]; then
            echo "❌ Security audit failed"
            exit 1
          fi
          
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ Build verification failed"
            exit 1
          fi
          
          echo "✅ All quality gates passed!"

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add deployment steps here

      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke test commands here

      - name: Notify deployment status
        run: |
          echo "Deployment completed successfully!"
          # Add notification logic (Slack, email, etc.)

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality-gates, deploy]
    if: always()
    steps:
      - name: Notify build status
        run: |
          if [[ "${{ needs.quality-gates.result }}" == "success" ]]; then
            echo "✅ Build passed all quality gates"
          else
            echo "❌ Build failed quality gates"
          fi
          
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "✅ Deployment successful"
          elif [[ "${{ needs.deploy.result }}" == "failure" ]]; then
            echo "❌ Deployment failed"
          else
            echo "ℹ️ Deployment skipped"
          fi