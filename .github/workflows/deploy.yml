name: 🚀 Production Deployment Pipeline

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main, production]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # 🔍 Code Quality & Security
  quality-check:
    name: 🔍 Quality & Security Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔒 Security audit
        run: npm audit --audit-level=moderate

      - name: 🧹 Lint code
        run: npm run lint

      - name: 📝 Check formatting
        run: npm run format:check

      - name: 🔍 Type check
        run: npm run type-check

  # 🧪 Testing Suite
  test:
    name: 🧪 Comprehensive Testing
    runs-on: ubuntu-latest
    needs: quality-check
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests
        run: npm run test:unit

      - name: 🔗 Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}

      - name: 🧪 Run component tests
        run: npm run test:components

      - name: 📊 Generate coverage report
        run: npm run test:coverage

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # 🏗️ Build & Optimize
  build:
    name: 🏗️ Build & Optimize
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 Setup environment
        run: |
          echo "NODE_ENV=production" >> $GITHUB_ENV
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> $GITHUB_ENV
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> $GITHUB_ENV

      - name: 🏗️ Build application
        run: npm run build

      - name: 📊 Analyze bundle
        run: npm run build:analyze

      - name: 🧪 Run performance tests
        run: npm run test:performance

      - name: 📦 Cache build artifacts
        uses: actions/cache@v3
        with:
          path: dist/
          key: build-${{ github.sha }}
          restore-keys: build-

  # 🔍 Security & Compliance
  security-scan:
    name: 🔍 Security & Compliance
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔒 Run security scans
        run: |
          npm audit --audit-level=high
          npm run security:scan

      - name: 🔍 Dependency vulnerability check
        run: npm run security:deps

      - name: 🛡️ Container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'your-app:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload security results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    environment: staging
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build for staging
        run: npm run build:staging

      - name: 🚀 Deploy to staging
        run: npm run deploy:staging
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}
          STAGING_API_KEY: ${{ secrets.STAGING_API_KEY }}

      - name: 🧪 Run staging tests
        run: npm run test:staging
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}

      - name: 📊 Performance audit
        run: npm run audit:performance
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}

  # 🚀 Deploy to Production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan, deploy-staging]
    environment: production
    if: github.ref == 'refs/heads/production'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build for production
        run: npm run build:production

      - name: 🔐 Setup database migration
        run: npm run db:migrate:production
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: 🚀 Deploy to production
        run: npm run deploy:production
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          PRODUCTION_API_KEY: ${{ secrets.PRODUCTION_API_KEY }}

      - name: 🧪 Run production health checks
        run: npm run health:check
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}

      - name: 📊 Final performance audit
        run: npm run audit:performance:production
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}

      - name: 📧 Send deployment notification
        run: npm run notify:deployment
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  # 📊 Post-Deployment Monitoring
  post-deployment:
    name: 📊 Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/production'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📊 Monitor application health
        run: npm run monitor:health
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}

      - name: 📈 Performance monitoring
        run: npm run monitor:performance
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}

      - name: 🔍 Error monitoring
        run: npm run monitor:errors
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}

      - name: 📧 Send monitoring report
        run: npm run notify:monitoring
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  # 🔄 Rollback (Manual Trigger)
  rollback:
    name: 🔄 Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔄 Rollback to previous version
        run: npm run rollback
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          PRODUCTION_API_KEY: ${{ secrets.PRODUCTION_API_KEY }}

      - name: 🧪 Verify rollback
        run: npm run health:check
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}

      - name: 📧 Send rollback notification
        run: npm run notify:rollback
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
