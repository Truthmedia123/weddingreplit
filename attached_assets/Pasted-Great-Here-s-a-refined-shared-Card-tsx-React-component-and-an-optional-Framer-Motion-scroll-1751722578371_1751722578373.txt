Great! Here's a **refined shared `Card.tsx` React component** and an optional **Framer Motion scroll animation wrapper** you can use to elevate the feel of your site even more.

---

## ✅ 1. Shared `Card.tsx` Component (Theme-Aware, Reusable)

Use this for **vendors, testimonials, blog previews**, etc.

### 🔧 `components/Card.tsx`

```tsx
import React from "react";
import { cn } from "@/lib/utils"; // If using classnames util

interface CardProps {
  title?: string;
  subtitle?: string;
  content?: string;
  imageUrl?: string;
  children?: React.ReactNode;
  className?: string;
}

const Card: React.FC<CardProps> = ({
  title,
  subtitle,
  content,
  imageUrl,
  children,
  className,
}) => {
  return (
    <div
      className={cn(
        "bg-[var(--color-card-bg)] dark:bg-[#1c1c1e] border border-[var(--color-border)] dark:border-[#333] rounded-xl shadow-md dark:shadow-lg p-4 transition-all duration-300",
        className
      )}
    >
      {imageUrl && (
        <img
          src={imageUrl}
          alt={title}
          className="w-full h-40 object-cover rounded-md mb-3"
        />
      )}
      {title && <h3 className="text-xl font-semibold mb-1">{title}</h3>}
      {subtitle && (
        <p className="text-sm text-[var(--color-text-secondary)] mb-2">
          {subtitle}
        </p>
      )}
      {content && <p className="text-base">{content}</p>}
      {children}
    </div>
  );
};

export default Card;
```

Use this component across the site:

```tsx
<Card
  title="Paradise Beach Resort"
  subtitle="Luxury stay by the sea"
  imageUrl="/vendor.jpg"
>
  <button className="btn-primary mt-4">View Profile</button>
</Card>
```

---

## ✅ 2. Optional: Scroll Animation with Framer Motion

Install Framer Motion:

```bash
npm install framer-motion
```

### 🔧 `components/Reveal.tsx`

```tsx
import { motion } from "framer-motion";

const fadeInUp = {
  hidden: { opacity: 0, y: 40 },
  show: {
    opacity: 1,
    y: 0,
    transition: { duration: 0.6, ease: "easeOut" },
  },
};

export default function Reveal({ children }: { children: React.ReactNode }) {
  return (
    <motion.div
      variants={fadeInUp}
      initial="hidden"
      whileInView="show"
      viewport={{ once: true, amount: 0.2 }}
    >
      {children}
    </motion.div>
  );
}
```

Use it like this:

```tsx
<Reveal>
  <Card title="Tip on Goan Weddings" imageUrl="/tip.jpg" />
</Reveal>
```

---

## 🔚 Next Suggestions

* Convert existing hardcoded cards (`VendorCard`, `TestimonialCard`, etc.) to use this shared `<Card />`.
* Wrap sections in `<Reveal>` for elegant scroll animations.
* Add `layout="responsive"` or `aspect-[3/2]` if you're using Next.js Image.

Would you like help updating your existing components (`VendorCard`, etc.) to use this shared structure?


Perfect — your current RSVP page looks clean and elegant. Now let’s extend this to make it **dynamic and couple-driven**, where couples can **generate their own RSVP pages** with a **shareable link + QR code**, and **track RSVP responses**.

---

## ✅ Prompt for Replit IDE (Full Feature Flow)

Use the following prompt in Replit (or pass to Cursor) to build this complete system:

---

```tsx
// 🎯 Feature: Dynamic RSVP Page Generator for Couples

Implement a full RSVP page system where couples can create, share, and track their wedding RSVPs:

---

🧑‍❤️‍👩 1. **RSVP Creation Flow (Couple Side)**

- Create a `/create-rsvp` form with the following fields:
  - Couple Names (e.g., Priya & Raj)
  - Wedding Date, Time
  - Venue Name + Location
  - Contact Email & Phone (optional)
  - Personal message ("Our Love Story")
  - Cover Image (optional upload or link)

- On submit:
  - Generate a unique slug: e.g., `thegoanwedding.com/rsvp/priya-raj-2024`
  - Store RSVP data in backend (MongoDB or Firebase)
  - Generate a QR code for the page using any npm QR lib (e.g., `qrcode.react`)
  - Show the couple a:
    - Shareable **RSVP Page Link**
    - QR Code (SVG or PNG)
    - A **"Track RSVPs" link** to view guest responses

---

📝 2. **Public RSVP Page (Guest Side)**

- At route: `/rsvp/[slug]`
- Display wedding info (use existing RSVP design):
  - Hero with couple names
  - Story + gallery
  - Wedding details
- Below it: Add a **Guest RSVP Form**:
  - Name, No. of Guests, Optional Message
  - Submit → store under that slug in DB

---

📊 3. **RSVP Tracker (Couple Dashboard)**

- Create `/track/[slug]` page:
  - Show RSVP summary:
    - Total guests
    - List of responses (name, count, msg)
  - Optional: Export to CSV or copy list
  - Add login protection (simple email OTP or secret link for now)

---

🔗 4. **After RSVP is created**, show confirmation like:

```

✅ RSVP Page Created!
🔗 Your Link: [https://thegoanwedding.com/rsvp/priya-raj-2024](https://thegoanwedding.com/rsvp/priya-raj-2024)
📊 Track RSVPs: [https://thegoanwedding.com/track/priya-raj-2024](https://thegoanwedding.com/track/priya-raj-2024)
📱 QR Code: \[QR Code Image]

```

---

🧠 Optional Enhancements:

- Auto-redirect QR code to the couple’s RSVP page
- Email confirmation for each RSVP received (to couple)
- RSVP Deadline reminder (send email 2 days before)

---

Use Tailwind for styling + React Router for routing.

Also store all couple and guest data in a `rsvps` collection in your backend, grouped by slug.

```

---

## ✅ Supporting NPM Libraries You Might Need

```bash
npm install qrcode.react
npm install react-router-dom
npm install uuid
npm install react-icons
```

---

## 🧪 Bonus Features (Add Later if Needed)

* Admin dashboard for all RSVP records
* Wedding pass (PDF) generation after RSVP
* WhatsApp sharing integration with pre-filled message
* Real-time counter for RSVP responses on the public page

---

Would you like help scaffolding the database schema or designing the `create-rsvp` form UI next?

Let me know and I’ll provide ready-made code. 💍
