# Wedding Invitation Generator Integration for Goan Wedding Website

Based on your Replit project structure and the PDF templates you've uploaded, here's a comprehensive prompt to add a wedding invitation generator section with self-destructing downloads to your wedding website:

## **Feature Overview**

Add a **Wedding Invitation Generator** that allows users to create personalized invitations using your existing PDF templates, with secure download links that self-destruct after download[1][2].

## **Implementation Structure**

### **1. Database Schema (Drizzle ORM)**

Create a new schema file `server/db/schema/invitations.ts`:

```typescript
import { pgTable, serial, text, timestamp, boolean, uuid } from 'drizzle-orm/pg-core';

export const invitations = pgTable('invitations', {
  id: serial('id').primaryKey(),
  sessionId: uuid('session_id').defaultRandom(),
  templateId: text('template_id').notNull(), // References PDF template
  guestData: text('guest_data').notNull(), // JSON string of form data
  downloadToken: text('download_token').unique(),
  isDownloaded: boolean('is_downloaded').default(false),
  expiresAt: timestamp('expires_at').notNull(),
  createdAt: timestamp('created_at').defaultNow(),
});

export const templates = pgTable('templates', {
  id: serial('id').primaryKey(),
  name: text('name').notNull(),
  filename: text('filename').notNull(),
  category: text('category').notNull(), // 'save-the-date', 'main-invitation', etc.
  previewImage: text('preview_image'),
  fieldMapping: text('field_mapping').notNull(), // JSON mapping for PDF fields
  createdAt: timestamp('created_at').defaultNow(),
});
```

### **2. Backend API Routes**

Create `server/api/invitations/` directory with these endpoints:

**`server/api/invitations/templates.ts`** - Get available templates:
```typescript
export async function GET() {
  const templates = await db.select().from(templatesTable);
  return Response.json(templates);
}
```

**`server/api/invitations/generate.ts`** - Generate invitation:
```typescript
import { PDFDocument, PDFForm } from 'pdf-lib';
import jwt from 'jsonwebtoken';

export async function POST(request: Request) {
  const { templateId, guestData } = await request.json();
  
  // Load PDF template
  const template = await db.select().from(templatesTable)
    .where(eq(templatesTable.id, templateId)).limit(1);
  
  const pdfBytes = await fs.readFile(`attached_assets/${template.filename}`);
  const pdfDoc = await PDFDocument.load(pdfBytes);
  const form = pdfDoc.getForm();
  
  // Fill form fields based on template mapping[46][49]
  const fieldMapping = JSON.parse(template.fieldMapping);
  Object.entries(guestData).forEach(([key, value]) => {
    if (fieldMapping[key]) {
      const field = form.getTextField(fieldMapping[key]);
      field.setText(value as string);
    }
  });
  
  // Generate temporary download token with 5-minute expiry[50]
  const downloadToken = jwt.sign(
    { templateId, sessionId: crypto.randomUUID() },
    process.env.JWT_SECRET,
    { expiresIn: '5m' }
  );
  
  // Save to database with expiration
  const invitation = await db.insert(invitations).values({
    templateId,
    guestData: JSON.stringify(guestData),
    downloadToken,
    expiresAt: new Date(Date.now() + 5 * 60 * 1000), // 5 minutes
  }).returning();
  
  // Save filled PDF temporarily
  const filledPdfBytes = await pdfDoc.save();
  await fs.writeFile(`temp/invitation_${downloadToken}.pdf`, filledPdfBytes);
  
  return Response.json({ 
    downloadToken, 
    expiresIn: 300000 // 5 minutes in milliseconds
  });
}
```

**`server/api/invitations/download/[token].ts`** - Self-destructing download:
```typescript
export async function GET(request: Request, { params }: { params: { token: string } }) {
  try {
    // Verify JWT token[47]
    const decoded = jwt.verify(params.token, process.env.JWT_SECRET);
    
    // Check if already downloaded
    const invitation = await db.select().from(invitations)
      .where(eq(invitations.downloadToken, params.token)).limit(1);
    
    if (!invitation || invitation.isDownloaded) {
      return new Response('Download link expired or already used', { status: 404 });
    }
    
    // Read and return file
    const filePath = `temp/invitation_${params.token}.pdf`;
    const fileBuffer = await fs.readFile(filePath);
    
    // Mark as downloaded and clean up[23]
    await db.update(invitations)
      .set({ isDownloaded: true })
      .where(eq(invitations.downloadToken, params.token));
    
    // Delete file after sending
    setTimeout(() => {
      fs.unlink(filePath).catch(console.error);
    }, 1000);
    
    return new Response(fileBuffer, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="wedding-invitation.pdf"`,
        'Cache-Control': 'no-store, no-cache, must-revalidate',
      },
    });
    
  } catch (error) {
    return new Response('Invalid or expired token', { status: 401 });
  }
}
```

### **3. Frontend Components**

Create `client/components/InvitationGenerator/`:

**`InvitationGenerator.tsx`** - Main component:
```tsx
import React, { useState, useEffect } from 'react';
import TemplateSelector from './TemplateSelector';
import InvitationForm from './InvitationForm';
import DownloadSection from './DownloadSection';

export default function InvitationGenerator() {
  const [selectedTemplate, setSelectedTemplate] = useState(null);
  const [formData, setFormData] = useState({});
  const [downloadToken, setDownloadToken] = useState(null);
  const [isGenerating, setIsGenerating] = useState(false);

  const handleGenerate = async () => {
    setIsGenerating(true);
    try {
      const response = await fetch('/api/invitations/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          templateId: selectedTemplate.id,
          guestData: formData,
        }),
      });
      
      const result = await response.json();
      setDownloadToken(result.downloadToken);
    } catch (error) {
      console.error('Generation failed:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    
      
        Create Your Wedding Invitation
      
      
      {!selectedTemplate && (
        
      )}
      
      {selectedTemplate && !downloadToken && (
        
      )}
      
      {downloadToken && (
         {
            setSelectedTemplate(null);
            setDownloadToken(null);
            setFormData({});
          }}
        />
      )}
    
  );
}
```

**`TemplateSelector.tsx`** - Template selection with previews:
```tsx
import React, { useState, useEffect } from 'react';

export default function TemplateSelector({ onSelect }) {
  const [templates, setTemplates] = useState([]);

  useEffect(() => {
    fetch('/api/invitations/templates')
      .then(res => res.json())
      .then(setTemplates);
  }, []);

  return (
    
      {templates.map(template => (
         onSelect(template)}
        >
          
          {template.name}
          {template.category}
        
      ))}
    
  );
}
```

**`InvitationForm.tsx`** - Dynamic form based on template:
```tsx
import React from 'react';

export default function InvitationForm({ 
  template, 
  formData, 
  onDataChange, 
  onGenerate, 
  isGenerating 
}) {
  const fieldMapping = JSON.parse(template.fieldMapping || '{}');
  const requiredFields = Object.keys(fieldMapping);

  const handleInputChange = (field, value) => {
    onDataChange(prev => ({ ...prev, [field]: value }));
  };

  const isFormValid = requiredFields.every(field => formData[field]?.trim());

  return (
    
      
        {requiredFields.map(field => (
          
            
              {field.replace(/([A-Z])/g, ' $1').trim()}
            
             handleInputChange(field, e.target.value)}
              className="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500"
              placeholder={`Enter ${field}`}
            />
          
        ))}
      
      
      
        {isGenerating ? 'Generating...' : 'Generate Invitation'}
      
    
  );
}
```

**`DownloadSection.tsx`** - Self-destructing download with countdown[3][4]:
```tsx
import React, { useState, useEffect } from 'react';

export default function DownloadSection({ token, onReset }) {
  const [timeLeft, setTimeLeft] = useState(300); // 5 minutes
  const [hasDownloaded, setHasDownloaded] = useState(false);

  useEffect(() => {
    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev  clearInterval(timer);
  }, []);

  const handleDownload = async () => {
    try {
      const response = await fetch(`/api/invitations/download/${token}`);
      
      if (!response.ok) {
        throw new Error('Download failed');
      }
      
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'wedding-invitation.pdf';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
      
      setHasDownloaded(true);
    } catch (error) {
      alert('Download failed. The link may have expired.');
    }
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  if (timeLeft === 0 || hasDownloaded) {
    return (
      
        
          {hasDownloaded ? 'File downloaded successfully!' : 'Download link expired'}
        
        
          Create Another Invitation
        
      
    );
  }

  return (
    
      
        Your Invitation is Ready!
      
      
      
        Download expires in: 
          {formatTime(timeLeft)}
        
      
      
      
        Download PDF Invitation
      
      
      
        ⚠️ This link will self-destruct after download for security
      
      
      
        Create Another Invitation
      
    
  );
}
```

### **4. Environment Variables**

Add to your `.env`:
```env
JWT_SECRET=your-super-secret-jwt-key-for-temporary-tokens
INVITATION_TEMP_DIR=./temp
```

### **5. Template Preparation**

For each PDF template, create a field mapping configuration[5][6]:

```json
{
  "brideName": "bride_name_field",
  "groomName": "groom_name_field", 
  "weddingDate": "date_field",
  "venue": "venue_field",
  "time": "time_field",
  "familyNames": "family_field"
}
```

### **6. Integration with Main App**

Add the route to your main routing:

```tsx
// In your main App.tsx or router configuration
import InvitationGenerator from './components/InvitationGenerator/InvitationGenerator';

// Add route

```

### **7. Security Features**

- **JWT tokens with 5-minute expiry**[7]
- **One-time download links**[1]
- **Automatic file cleanup after download**[2]
- **Server-side PDF generation to prevent tampering**[8]
- **Input validation and sanitization**

This implementation provides a complete wedding invitation generator with secure, self-destructing downloads that integrates seamlessly with your existing Drizzle ORM and TypeScript Vite structure[9][10].

[1] https://digify.com/blog/pdf-document-expiry-and-self-destruct/
[2] https://www.sendbig.com/snap/
[3] https://gabrieleromanato.name/javascript-how-to-force-file-download
[4] https://www.browserstack.com/guide/enable-file-downloads-in-javascript
[5] https://experienceleague.adobe.com/en/docs/experience-manager-guides/using/install-guide/on-prem-ig/output-gen-config/config-native-pdf-publish/pdf-template
[6] https://surveyjs.io/pdf-generator/documentation/fill-pdf-form-with-web-form-responses
[7] https://codeburst.io/part-1-jwt-to-authenticate-downloadable-files-at-client-8e0b979c9ac1
[8] https://pdf.co/tutorials/how-to-fill-pdf-forms-using-pdf-co-web-api-in-javascript
[9] https://app.studyraid.com/en/read/11288/352143/understanding-project-structure
[10] https://betterstack.com/community/guides/scaling-nodejs/drizzle-orm/
[11] https://ppl-ai-file-upload.s3.amazonaws.com/web/direct-files/attachments/57406101/237524ab-3422-477f-9b4f-539968935267/Untitled-2.pdf
[12] https://ppl-ai-file-upload.s3.amazonaws.com/web/direct-files/attachments/57406101/be65d5fa-cc32-425e-8682-fb768044090b/Untitled-1.pdf
[13] https://ppl-ai-file-upload.s3.amazonaws.com/web/direct-files/attachments/57406101/c2c31ace-c6c1-4ded-97ae-7ebc9586bc78/Untitled-1.pdf
[14] https://ppl-ai-file-upload.s3.amazonaws.com/web/direct-files/attachments/57406101/afd00900-51f4-4017-acf7-19721f28e981/Untitled.pdf
[15] https://github.com/Truthmedia123/weddingreplit
[16] https://dynapictures.com/generate-online/wedding-invitation
[17] https://github.com/mahdiashtian/self-destructing-downloader
[18] https://play.google.com/store/apps/details?id=com.wedding.weddinginvitation
[19] https://stackoverflow.com/questions/31659280/customizing-pdf-js
[20] https://www.reddit.com/r/selfhosted/comments/lj0gtr/best_e2e_selfhosted_self_destructing_file_share/
[21] https://www.canva.com/create/wedding-invitations/
[22] https://www.nutrient.io/guides/web/pdf-generation/from-pdf-template/
[23] https://docs.keeper.io/en/enterprise-guide/sharing/self-destructing-records
[24] https://www.greetingsisland.com/invitations
[25] https://pdf-lib.js.org
[26] https://play.google.com/store/apps/details?id=wedding.card.maker
[27] https://pdf.co/tutorials/create-pdf-invoice-using-html-templates-in-javascript
[28] https://mashable.com/article/mozilla-firefox-send-file-sharing-launch
[29] https://www.adobe.com/in/express/create/invitation/wedding
[30] https://dzone.com/articles/pdf-document-generation-with-templates-in-javascri
[31] https://www.greetingsisland.com/invitations/wedding
[32] https://docs.apryse.com/web/guides/generate-via-template
[33] https://blog.rampatra.com/wedding-website
[34] https://elements.envato.com/learn/best-html-wedding-website-templates
[35] https://www.youtube.com/watch?v=vLze97zZKsU
[36] https://www.youtube.com/watch?v=SL28CD_rXEY
[37] https://orm.drizzle.team/docs/sql-schema-declaration
[38] https://atomizedobjects.com/blog/javascript/how-to-download-a-file-from-a-url-in-javascript/
[39] https://themeforest.net/search/react%20wedding
[40] https://orm.drizzle.team/docs/overview
[41] https://javascript.plainenglish.io/downloading-files-in-javascript-from-simple-clicks-to-powerful-streams-cf25d4520d1d
[42] https://github.com/josenymad/wedding
[43] https://www.reddit.com/r/node/comments/1fqujb/how_to_create_a_temporary_file_for_a_one_time/
[44] https://github.com/topics/wedding-website
[45] https://deno.com/blog/build-database-app-drizzle
[46] https://blog.logrocket.com/programmatically-downloading-files-browser/
[47] https://www.youtube.com/watch?v=-kxO37W_rnA
[48] https://github.com/drizzle-team/drizzle-orm
[49] https://jwt.io/introduction
[50] https://www.youtube.com/watch?v=JJ0pjRotdKI
[51] https://www.nutrient.io/blog/creating-and-filling-pdf-forms-programmatically-in-javascript/
[52] https://www.npmjs.com/package/file-upload-with-preview
[53] https://developer.mescius.com/blogs/how-to-add-pdf-form-filler-options-in-your-javascript-application
[54] https://stackoverflow.com/questions/44133536/is-it-safe-to-store-a-jwt-in-localstorage-with-reactjs
[55] https://www.geeksforgeeks.org/reactjs/how-to-upload-image-and-preview-it-using-reactjs/
[56] https://stackoverflow.com/questions/24944404/fill-pdf-form-with-javascript-client-side-only
[57] https://portswigger.net/burp/documentation/desktop/testing-workflow/session-management/jwts
[58] https://www.npmjs.com/package/@rpldy/upload-preview
[59] https://www.nutrient.io/guides/web/forms/form-filling/
[60] https://testdriven.io/blog/fastapi-jwt-auth/
[61] https://blog.greenroots.info/how-to-upload-and-preview-images-in-reactjs
[62] https://auth0.com/docs/secure/tokens/access-tokens
[63] https://github.com/bezkoder/react-js-image-upload-preview
[64] https://docs.apryse.com/web/guides/features/forms/fill-fields
[65] https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-using-tokens-verifying-a-jwt.html